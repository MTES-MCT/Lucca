<?php

/*
 * Copyright (c) 2025. Numeric Wave
 *
 * Affero General Public License (AGPL) v3
 *
 * For more information, please refer to the LICENSE file at the root of the project.
 */

namespace Lucca\Bundle\MinuteBundle\Repository;

use Doctrine\ORM\{EntityRepository, NonUniqueResultException, QueryBuilder};

use Lucca\Bundle\MinuteBundle\Entity\{Minute, MinuteStory};

/**
 * MinuteStoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MinuteStoryRepository extends EntityRepository
{
    /**
     * Override findAll
     * Get the last minute story of all minutes in the date range
     */
    public function findClosureBetween($dateStart, $dateEnd, $minutes = null): mixed
    {
        /** If minutes are defined get closure corresponding to these minute */
        if ($minutes != null && count($minutes) > 0) {
            $qb = $this->queryMinuteStory();

            $qb->andWhere($qb->expr()->in('minute', ':q_minute'))
                ->setParameter(':q_minute', $minutes);
        } else {
            /** Else get minutes with date updating between the given dates */
            $qb = $this->getLast($dateStart, $dateEnd);
        }

        $qb->andWhere($qb->expr()->eq('minuteStory.status', ':q_status'))
            ->setParameter(':q_status', MinuteStory::STATUS_CLOSURE);

//        TODO Temporary comment it to make the stat working but we need to fix it to make it work with lot of datas
//        $qb->select([
//            'partial minuteStory.{id, dateUpdate, status}',
//            'partial minute.{id, num, closure}',
//            'partial closure.{id, status}',
//            'partial updatingBy.{id}',
//        ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the last minute story of all minutes in the date range
     * If needed we can filter by status also
     */
    public function findLast($dateStart, $dateEnd, $status = null, $minutes = null): mixed
    {
        $qb = $this->getLast($dateStart, $dateEnd);

        if ($status && count($status) > 0) {
            $qb->andWhere($qb->expr()->in('minuteStory.status', ':q_status'))
                ->setParameter(':q_status', $status);
        }

        /************** Filters on minute to get story only for given minutes ******************/
        if ($minutes && count($minutes) > 0) {
            $qb->andWhere($qb->expr()->in('minute', ':q_minutes'))
                ->setParameter(':q_minutes', $minutes);
        }

        $qb->select([
            'partial minuteStory.{id, dateUpdate, status}',
            'partial minute.{id, num}',
            'partial updatingBy.{id}',
        ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Override findAll
     * Get the last minute story for a minute
     */
    public function findLastByMinute(?Minute $p_minute): array
    {
        $qb = $this->queryMinuteStory();

        $qb->where($qb->expr()->eq('minuteStory.minute', ':q_minute'))
            ->setParameter(':q_minute', $p_minute);

        $qb->orderBy('minuteStory.dateUpdate', 'DESC');

        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    /*******************************************************************************************/
    /********************* Custom get *****/
    /*******************************************************************************************/

    /**
     * Get the last minute story of all minutes in the date range
     */
    public function getLast($dateStart, $dateEnd): QueryBuilder
    {
        $qb = $this->queryMinuteStory();

        $qb->andWhere($qb->expr()->between('minuteStory.dateUpdate', ':q_start', ':q_end'))
            ->setParameter(':q_start', $dateStart)
            ->setParameter(':q_end', $dateEnd);

        return $qb;
    }

    /*******************************************************************************************/
    /********************* Override basic methods *****/
    /*******************************************************************************************/

    /**
     * Override findAll method
     * with MinuteStory dependencies
     */
    public function findAll(): array
    {
        $qb = $this->queryMinuteStory();

        return $qb->getQuery()->getResult();
    }

    /**
     * Override find method
     * with MinuteStory dependencies
     */
    public function find(mixed $id, $lockMode = null, $lockVersion = null): ?object
    {
        $qb = $this->queryMinuteStory();

        $qb->where($qb->expr()->eq('minuteStory.id', ':q_minuteStory'))
            ->setParameter(':q_minuteStory', $id);

        try {
            return $qb->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            echo 'NonUniqueResultException has been thrown - MinuteStory Repository - ' . $e->getMessage();

            return null;
        }
    }

    /*******************************************************************************************/
    /********************* Query - Dependencies of MinuteStory Entity *****/
    /*******************************************************************************************/

    /**
     * Classic dependencies
     */
    private function queryMinuteStory(): QueryBuilder
    {
        return $this->createQueryBuilder('minuteStory')
            ->leftJoin('minuteStory.updatingBy', 'updatingBy')->addSelect('updatingBy')
            ->leftJoin('minuteStory.minute', 'minute')->addSelect('minute')
            ->leftJoin('minute.closure', 'closure')->addSelect('closure');
    }
}
