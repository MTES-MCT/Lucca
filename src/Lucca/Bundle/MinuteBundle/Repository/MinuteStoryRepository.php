<?php
/*
 * Copyright (c) 2025. Numeric Wave
 *
 * Afero General Public License (AGPL) v3
 *
 * For more information, please refer to the LICENSE file at the root of the project.
 */

namespace Lucca\Bundle\MinuteBundle\Repository;

use Lucca\Bundle\MinuteBundle\Entity\Minute;
use Lucca\Bundle\MinuteBundle\Entity\MinuteStory;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\QueryBuilder;

/**
 * MinuteStoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MinuteStoryRepository extends EntityRepository
{
    /**
     * Override findAll
     * Get the last minute story of all minutes in the date range
     *
     * @param $p_dateStart
     * @param $p_dateEnd
     * @param null $p_minutes
     * @return int|mixed|string
     */
    public function findClosureBetween($p_dateStart, $p_dateEnd, $p_minutes = null)
    {
        /** If minutes are defined get closure corresponding to these minute */
        if ($p_minutes != null && count($p_minutes) > 0) {
            $qb = $this->queryMinuteStory();

            $qb->andWhere($qb->expr()->in('minute', ':q_minute'))
                ->setParameter(':q_minute', $p_minutes);
        }else{
            /** Else get minutes with date updating between the given dates */
            $qb = $this->getLast($p_dateStart, $p_dateEnd);
        }

        $qb->andWhere($qb->expr()->eq('minuteStory.status', ':q_status'))
            ->setParameter(':q_status', MinuteStory::STATUS_CLOSURE);

        $qb->select([
            'partial minuteStory.{id, dateUpdate, status}',
            'partial minute.{id, num, closure}',
            'partial closure.{id, status}',
            'partial updatingBy.{id}',
        ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the last minute story of all minutes in the date range
     * If needed we can filter by status also
     *
     * @param $p_dateStart
     * @param $p_dateEnd
     * @param null $p_status
     * @param null $p_minutes
     * @return int|mixed|string
     */
    public function findLast($p_dateStart, $p_dateEnd, $p_status = null, $p_minutes = null)
    {
        $qb = $this->getLast($p_dateStart, $p_dateEnd);

        if ($p_status && count($p_status) > 0) {
            $qb->andWhere($qb->expr()->in('minuteStory.status', ':q_status'))
                ->setParameter(':q_status', $p_status);
        }

        /************** Filters on minute to get story only for given minutes ******************/
        if ($p_minutes && count($p_minutes) > 0) {
            $qb->andWhere($qb->expr()->in('minute', ':q_minutes'))
                ->setParameter(':q_minutes', $p_minutes);
        }

        $qb->select([
            'partial minuteStory.{id, dateUpdate, status}',
            'partial minute.{id, num}',
            'partial updatingBy.{id}',
        ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Override findAll
     * Get the last minute story for a minute
     *
     * @param Minute|null $p_minute
     * @return array
     */
    public function findLastByMinute(?Minute $p_minute)
    {
        $qb = $this->queryMinuteStory();

        $qb->where($qb->expr()->eq('minuteStory.minute', ':q_minute'))
            ->setParameter(':q_minute', $p_minute);

        $qb->orderBy('minuteStory.dateUpdate', 'DESC');

        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    /*******************************************************************************************/
    /********************* Custom get *****/
    /*******************************************************************************************/
    /**
     * Get the last minute story of all minutes in the date range
     *
     * @param $p_dateStart
     * @param $p_dateEnd
     * @return int|mixed|string
     */
    public function getLast($p_dateStart, $p_dateEnd)
    {
        $qb = $this->queryMinuteStory();

        $qb->andWhere($qb->expr()->between('minuteStory.dateUpdate', ':q_start', ':q_end'))
            ->setParameter(':q_start', $p_dateStart)
            ->setParameter(':q_end', $p_dateEnd);

        return $qb;
    }

    /*******************************************************************************************/
    /********************* Override basic methods *****/
    /*******************************************************************************************/

    /**
     * Override findAll method
     * with MinuteStory dependencies
     *
     * @return array
     */
    public function findAll()
    {
        $qb = $this->queryMinuteStory();

        return $qb->getQuery()->getResult();
    }

    /**
     * Override find method
     * with MinuteStory dependencies
     *
     * @param mixed $id
     * @param null $lockMode
     * @param null $lockVersion
     * @return false|int|mixed|object|string|null
     */
    public function find($id, $lockMode = null, $lockVersion = null)
    {
        $qb = $this->queryMinuteStory();

        $qb->where($qb->expr()->eq('minuteStory.id', ':q_minuteStory'))
            ->setParameter(':q_minuteStory', $id);

        try {
            return $qb->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            echo 'NonUniqueResultException has been thrown - MinuteStory Repository - ' . $e->getMessage();
            return false;
        }
    }

    /*******************************************************************************************/
    /********************* Query - Dependencies of MinuteStory Entity *****/
    /*******************************************************************************************/

    /**
     * Classic dependencies
     *
     * @return QueryBuilder
     */
    private function queryMinuteStory()
    {
        $qb = $this->createQueryBuilder('minuteStory')
            ->leftJoin('minuteStory.updatingBy', 'updatingBy')->addSelect('updatingBy')
            ->leftJoin('minuteStory.minute', 'minute')->addSelect('minute')
            ->leftJoin('minute.closure', 'closure')->addSelect('closure');

        return $qb;
    }
}
