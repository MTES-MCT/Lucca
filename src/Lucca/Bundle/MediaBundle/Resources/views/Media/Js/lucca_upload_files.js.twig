{#- - Translation domain - -#}
{% trans_default_domain 'MediaBundle' %}

Dropzone.autoDiscover = false;

function showAlert(message, type = 'success', timeout = 4000) {
    const container = document.getElementById('alert-container');
    if (!container) return;

    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show shadow position-relative`;
    alert.role = 'alert';
    alert.innerHTML = `
        <div>${message}</div>
        <button type="button" class="btn border-0 bg-transparent p-0 position-absolute top-0 end-0 m-2" data-bs-dismiss="alert" aria-label="Close">
        </button>
    `;

    container.appendChild(alert);

    setTimeout(() => {
        alert.classList.remove('show');
        alert.classList.add('hide');
        setTimeout(() => alert.remove(), 200);
    }, timeout);
}

$(window).on('load', function () {
    let self = media_form;

    for (let index = 0; index < $(self.sDropzoneMediaTag).length; index++) {
        var myDropzone = new Dropzone('#' + $(self.sDropzoneMediaTag)[index].id, {
            url: Routing.generate('lucca_media_api_upload_files', { 'dep_code': '{{ getDepartmentCode() }}' }),
            addRemoveLinks: true,
            uploadMultiple: true,
            parallelUploads: 1,
            maxFilesize: {{ maxFilesize }},
            maxFiles: {{ maxCollectionFiles }} - $(self.sDropzoneMediaTag)[index].dataset['countFile'],
            dictCancelUpload: "{{ 'message.dropzone.cancelUpload'|trans|e('js') }}",
            dictRemoveFile: "{{ 'message.dropzone.removeFile'|trans|e('js') }}",
            dictMaxFilesExceeded: "{{ 'message.dropzone.maxFilesReached'|trans|e('js') }}",
            dictFileTooBig: "{{ 'message.dropzone.fileTooBig'|trans|e('js') }}",
            hiddenFileInput: $('#' + $(self.sDropzoneMediaTag)[index].id + ' input[type="file"]')[0],
            hiddenInputContainer: $(self.sDropzoneMediaTag)[index]
        });

        if (myDropzone.options.hiddenFileInput) {
            $('#' + $(self.sDropzoneMediaTag)[index].id).append('<input id="' + $(self.sDropzoneMediaTag)[index].id + '_fileText" type="text" name="' + myDropzone.options.hiddenFileInput.name + '" hidden="hidden"/>');
            myDropzone.options.hiddenFileInput.name = null;
        }

        myDropzone.on('sending', function () {
            $('#' + myDropzone.element.id).closest('form').on('submit', function (event) {
                event.preventDefault();
                showAlert("{{ 'message.media.mediaProcessing'|trans|e('js') }}", "danger");
            });
        });

        myDropzone.on('queuecomplete', function () {
            $('#' + myDropzone.element.id).closest('form').off('submit');
        });

        myDropzone.on('maxfilesreached', function () {
            showAlert("{{ 'message.dropzone.maxFilesReached'|trans|e('js') }}", "danger");
        });

        $(document)
            .on('submit', $('#' + myDropzone.element.id).closest('form'), function (event) {
                let files = myDropzone.options.hiddenFileInput.files;
                let fileText = $('#' + $(self.sDropzoneMediaTag)[index].id + '_fileText');
                fileText[0].value = '';
                for (let index = 0; index < files.length; index++) {
                    const element = files[index];
                    fileText[0].value += element.name + ';;' + element.type + ';;;';
                }
                myDropzone.options.hiddenFileInput.remove();
            });
    }

    $('.dropzoneMedia .custom-file .custom-file-label, .media-form-container .custom-file .custom-file-label').each(function () {
        $(this).parents()[0].style.display = 'none';
    });

    for (let index = 0; index < $('.dz-button').length; index++) {
        $('.dz-button')[index].innerHTML = "{{ 'message.dropzone.title'|trans|e('js') }}";
    }
});

let media_form = {
    sAllMediaTag: '.mediaFile',
    sAllMediaGroupTag: '.media-form-container',
    sAllMediaRemoveBtnTag: '.media-remove-btn',
    sMediaRemoveBtnTag: '#media-remove-btn-',
    sFileInputTag: '.file-input',
    sFileRemoveBtnTag: '.file-remove-btn',
    sModalTag: '.modal',
    sModalConfirmRemoveTag: '#modal-confirm-remove',
    sDropzoneMediaTag: '.dropzoneMedia',

    _init: function () {
        this._addListeners();
    },

    _addListeners: function () {
        let self = this;
        $(document)
            .on('change', self.sAllMediaTag, function (event) {
                self.uploadFiles(event);
            })
            .on('click', self.sAllMediaRemoveBtnTag, function (event) {
                self.getDeleteModal(event);
            })
            .on('change', self.sFileInputTag, function (event) {
                self.showRemoveFileButton(event);
            });
    },

    uploadFiles: function (event, filesToUpload = null) {
        let self = this;
        let formData = new FormData();
        let files = event?.target?.files || filesToUpload;

        if (files && files.length > 0) {
            for (let file of files) {
                formData.append(file.name, file);
            }

            $.ajax({
                type: "POST",
                url: Routing.generate('lucca_media_api_upload_files', { 'dep_code': '{{ getDepartmentCode() }}' }),
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (response) {
                    for (let res of response) {
                        if (res.isUploaded)
                            showAlert("{{ 'message.media.successUpload'|trans|e('js') }}", "success");
                        else
                            showAlert("{{ 'message.media.failedUpload'|trans|e('js') }}", "danger");
                    }
                }
            });
        }
    },

    getDeleteModal: function (event) {
        let self = this;
        let mediaId = event.target.dataset['mediaId'];
        let entityParent = event.target.dataset['entityParent'];
        let idParent = event.target.dataset['entityParentId'];
        let varsMedia = event.target.dataset['mediaVars'];

        if (mediaId) {
            $.ajax({
                type: "GET",
                url: Routing.generate('lucca_media_api_get_delete_modal', { 'dep_code': '{{ getDepartmentCode() }}' }),
                data: { id: mediaId, entityParent, idParent, varsMedia },
                success: function (response) {
                    if ([ -1, 2, 3 ].includes(response)) {
                        showAlert("{{ 'message.media.mediaNotFound'|trans|e('js') }}", "warning");
                    } else {
                        $(self.sModalTag).remove();
                        $('.block-modals').append(response);
                        $(self.sModalConfirmRemoveTag)
                            .data('media-id', mediaId)
                            .data('entity-parent', entityParent)
                            .data('entity-parent-id', idParent)
                            .data('media-vars', varsMedia);

                        $(self.sModalTag).modal('show');

                        $(self.sModalConfirmRemoveTag).off('click').on('click', function () {
                            $(self.sModalTag).modal('hide');
                            self.removeMedia(this);
                        });
                    }
                }
            });
        }
    },

    removeMedia: function (trigger) {
        let self = this;
        let mediaId = $(trigger).data('media-id');
        let entityParent = $(trigger).data('entity-parent');
        let idParent = $(trigger).data('entity-parent-id');
        let varsMedia = $(trigger).data('media-vars');

        if (mediaId) {
            $.ajax({
                type: "DELETE",
                url: Routing.generate('lucca_media_api_remove_media', { 'dep_code': '{{ getDepartmentCode() }}' }),
                data: { id: mediaId, entityParent, idParent, varsMedia },
                dataType: 'json',
                success: function (response) {
                    if (response === -1 || response === 2) {
                        showAlert("{{ 'message.media.mediaNotFound'|trans|e('js') }}", "warning");
                    } else if (response === 0) {
                        showAlert("{{ 'message.media.failedRemoveMedia'|trans|e('js') }}", "danger");
                    } else if (response === 1) {
                        let rowMedia = $(self.sMediaRemoveBtnTag + mediaId)[0];
                        let dropzoneElement = rowMedia.parentElement.lastChild;
                        let instance = Dropzone.instances.find(i => i.element.id === dropzoneElement.id);
                        if (instance) instance.options.maxFiles++;
                        rowMedia.remove();
                        showAlert("{{ 'message.media.removeMedia'|trans|e('js') }}", "success");
                    } else if (response === 3) {
                        showAlert("{{ 'message.media.mediaEmpty'|trans|e('js') }}", "warning");
                    }
                }
            });
        }
    },

    showRemoveFileButton: function (event) {
        let self = this;
        let button = $("#" + event.currentTarget.id.replace('file-input', 'file-remove'));
        if (button.length > 0) {
            button[0].hidden = false;
            $(document).on('click', self.sFileRemoveBtnTag, function (e) {
                self.emptyFileInput(e);
            });
        }
    },

    emptyFileInput: function (event) {
        let inputId = event.currentTarget.id.replace('file-remove', 'file-input');
        let inputFile = $('#' + inputId).find("input[type='file']");

        if (inputFile.length > 0 && inputFile[0].files.length > 0) {
            inputFile[0].value = null;
            inputFile[0].dispatchEvent(new Event('change'));
            event.currentTarget.hidden = true;
            showAlert("Suppression OK", "success");
        }
    }
};

media_form._init();
