{% trans_default_domain 'LuccaMinuteBundle' %}

function createMarkersSpotted() {

    /** Get coords of the border of the map */
    var bds = map.getBounds();

    var request = $.ajax({
        url: Routing.generate('lucca_get_minutesSpotted'),
        data: {
            displayResults: displayResults,
            adherent: {% if adherentId %}{{ adherentId }}{% else %}null{% endif %},
            minLat: bds.getSouthWest().lat(),
            minLon: bds.getSouthWest().lng(),
            maxLat: bds.getNorthEast().lat(),
            maxLon: bds.getNorthEast().lng()
            {% if dateStart is defined %}
            ,
            dateStart: "{{ dateStart | date('d/m/Y') }}",
            dateEnd: "{{ dateEnd | date('d/m/Y') }}"
            {% endif %}
        },
        success: function (response) {
            let res = JSON.parse(response);
            let typeMarker = "minutesSpotted";

            for (let i = 0; i < res.length; i++) {
                var latLng = new google.maps.LatLng(res[i]['lat'], res[i]['lon']);
                var iconBase = '{{ asset('assets/img/Pins/png/spoting.png') }}';
                var num = res[i]['num'].toString();
                var markerS = createMarker(num, iconBase, latLng);
                let date;
                if(res[i]['dateComplaint']){
                    date = res[i]['dateComplaint'];
                }else{
                    date = "{{ 'text.minute.noDate' | trans }}";
                }

                /** Create infos popup on over */
                var htmlInfos = generateHtmlInfos(
                    null,
                    "{{ path('lucca_minute_show', { 'id': 'minute.id'}) }}"
                        .replace('minute.id', res[i]['id']),
                    [
                        "Adresse : " + res[i]['address'],
                        "Agent : " + res[i]['agent'],
                        "Date de signalement : " + date
                    ]
                );
                createInfoWindow(res[i]['id'], markerS, htmlInfos);
                /** End popup */

                datas[typeMarker].push(markerS);
            }
            clusters[typeMarker] = new MarkerClusterer(map, datas[typeMarker], {
                imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
                maxZoom: maxZoomCluster,
                ignoreHidden: true,
            });
        },
        error: function (response) {
            console.log(response);
        }
    });
}